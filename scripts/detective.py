"""
Dataset Detective - Phase 1 EDA

Usage:
  python scripts/detective.py path/to/dataset.csv

Outputs:
  - audit_report.png
  - report.txt
"""

import sys
import io
import math
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

def summarize_data(df: pd.DataFrame) -> pd.DataFrame:
    """Return summary with type, unique count, missing pct, mean, median."""
    res = []
    for col in df.columns:
        s = df[col]
        numeric = pd.api.types.is_numeric_dtype(s)
        uniques = s.nunique(dropna=True)
        missing_pct = float(s.isna().mean())
        mean = float(s.mean()) if numeric else None
        median = float(s.median()) if numeric else None
        res.append({
            "column": col,
            "type": "numeric" if numeric else "categorical",
            "uniques": int(uniques),
            "missing_pct": missing_pct,
            "mean": mean,
            "median": median,
        })
    return pd.DataFrame(res)

def plot_missingness(df: pd.DataFrame, ax=None):
    """Bar plot of missingness per column."""
    miss = df.isnull().mean().sort_values(ascending=False)
    ax = ax or plt.gca()
    sns.barplot(x=miss.values * 100, y=miss.index, color="#00FFFF", ax=ax)
    ax.set_xlabel("Missing (%)")
    ax.set_ylabel("")
    ax.set_xlim(0, 100)
    return ax

def plot_distributions(df: pd.DataFrame, ax=None):
    """Plot distributions for up to 4 numeric columns."""
    ax = ax or plt.gca()
    nums = df.select_dtypes(include=np.number).columns.tolist()[:4]
    if not nums:
        ax.text(0.5, 0.5, "No numeric columns", ha="center", va="center")
        return ax
    for i, col in enumerate(nums):
        sns.kdeplot(df[col].dropna(), ax=ax, label=col)
    ax.legend(loc="upper right", frameon=False)
    ax.set_title("Distributions")
    return ax

def plot_correlations(df: pd.DataFrame, ax=None):
    """Correlation heatmap for numeric columns."""
    ax = ax or plt.gca()
    nums = df.select_dtypes(include=np.number)
    if nums.shape[1] < 2:
        ax.text(0.5, 0.5, "Not enough numeric columns", ha="center", va="center")
        return ax
    corr = nums.corr(numeric_only=True)
    sns.heatmap(corr, cmap="coolwarm", center=0, annot=False, ax=ax, cbar_kws={'shrink': 0.8})
    ax.set_title("Correlation heatmap")
    return ax

def generate_report_png(df: pd.DataFrame, out_path="audit_report.png"):
    """Create a one-page PNG with summary, missingness, distributions, correlations."""
    summary = summarize_data(df)

    fig = plt.figure(figsize=(12, 18), dpi=160)
    gs = fig.add_gridspec(6, 2, height_ratios=[0.5, 2, 2, 2, 0.2, 0.2], hspace=0.8, wspace=0.6)

    # Header
    ax0 = fig.add_subplot(gs[0, :])
    ax0.axis("off")
    ax0.text(0, 0.7, "Dataset Detective — Phase 1 EDA", fontsize=20, fontweight="bold")
    ax0.text(0, 0.25, f"Rows: {len(df):,} · Columns: {df.shape[1]}", fontsize=12, alpha=0.8)

    # Summary table (first 12 rows)
    ax1 = fig.add_subplot(gs[1, :])
    ax1.axis("off")
    tbl = summary.head(12)[["column","type","uniques","missing_pct","mean","median"]].copy()
    tbl["missing_pct"] = (tbl["missing_pct"] * 100).round(1)
    cell_text = tbl.fillna("–").values.tolist()
    col_labels = ["Column","Type","Uniques","Missing %","Mean","Median"]
    table = ax1.table(cellText=cell_text, colLabels=col_labels, loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(9)
    table.scale(1, 1.4)

    # Missingness
    ax2 = fig.add_subplot(gs[2, :])
    plot_missingness(df, ax2)

    # Distributions
    ax3 = fig.add_subplot(gs[3, :])
    plot_distributions(df, ax3)

    # Correlations
    ax4 = fig.add_subplot(gs[4, :])
    plot_correlations(df, ax4)

    # Footer
    ax5 = fig.add_subplot(gs[5, :])
    ax5.axis("off")
    ax5.text(0, 0.5, "Generated by Dataset Detective", fontsize=10, alpha=0.7)

    fig.savefig(out_path, bbox_inches="tight")
    plt.close(fig)

def write_text_summary(df: pd.DataFrame, out_path="report.txt"):
    summary = summarize_data(df)
    missing_heavy = summary[summary["missing_pct"] > 0.2]["column"].tolist()
    lines = []
    lines.append("Phase 1: Dataset Detective — EDA Summary")
    lines.append("")
    lines.append(f"Rows: {len(df):,}  Columns: {df.shape[1]}")
    lines.append(f"Columns with >20% missing: {', '.join(missing_heavy) if missing_heavy else 'None'}")
    lines.append("")
    lines.append("Column summaries:")
    for _, r in summary.iterrows():
        line = f"- {r['column']} [{r['type']}] uniques={int(r['uniques'])} missing={(float(r['missing_pct'])*100):.1f}%"
        if r["type"] == "numeric":
            m = "N/A" if pd.isna(r["mean"]) else f"{float(r['mean']):.3f}"
            md = "N/A" if pd.isna(r["median"]) else f"{float(r['median']):.3f}"
            line += f" mean={m} median={md}"
        lines.append(line)
    with open(out_path, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

def main():
    if len(sys.argv) < 2:
        print("Usage: python scripts/detective.py path/to/dataset.csv")
        sys.exit(1)
    csv_path = sys.argv[1]
    df = pd.read_csv(csv_path)
    generate_report_png(df, "audit_report.png")
    write_text_summary(df, "report.txt")
    print("Audit complete: audit_report.png, report.txt")

if __name__ == "__main__":
    main()
